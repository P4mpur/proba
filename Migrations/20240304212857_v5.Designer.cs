// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using proba.Models;

#nullable disable

namespace proba.Migrations
{
    [DbContext(typeof(AplikacijadbContext))]
    [Migration("20240304212857_v5")]
    partial class v5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("proba.Models.Feedback", b =>
                {
                    b.Property<int>("UID")
                        .HasColumnType("int");

                    b.Property<int>("ObjID")
                        .HasColumnType("int");

                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<float>("Ocena")
                        .HasColumnType("real");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UID", "ObjID");

                    b.HasIndex("ObjID");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("proba.Models.MyObject", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Adresa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LandlordID")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LandlordID");

                    b.ToTable("Objects");
                });

            modelBuilder.Entity("proba.Models.Reservation", b =>
                {
                    b.Property<int>("UID")
                        .HasColumnType("int");

                    b.Property<int>("ObjID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.HasKey("UID", "ObjID");

                    b.HasIndex("ObjID");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("proba.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("proba.Models.Feedback", b =>
                {
                    b.HasOne("proba.Models.MyObject", "Object")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ObjID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Feedback_ObjectCT");

                    b.HasOne("proba.Models.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Feedback_UserCT");

                    b.Navigation("Object");

                    b.Navigation("User");
                });

            modelBuilder.Entity("proba.Models.MyObject", b =>
                {
                    b.HasOne("proba.Models.User", "Landlord")
                        .WithMany("Objects")
                        .HasForeignKey("LandlordID");

                    b.Navigation("Landlord");
                });

            modelBuilder.Entity("proba.Models.Reservation", b =>
                {
                    b.HasOne("proba.Models.MyObject", "Object")
                        .WithMany("Reservations")
                        .HasForeignKey("ObjID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Reservation_ObjectCT");

                    b.HasOne("proba.Models.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Reservation_UserCT");

                    b.Navigation("Object");

                    b.Navigation("User");
                });

            modelBuilder.Entity("proba.Models.MyObject", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("proba.Models.User", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Objects");

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
